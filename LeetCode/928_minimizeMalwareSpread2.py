from collections import deque

class Solution:

    def M(self, n, mat, index, initial):
        q = deque([])
        visited = set()
        for i in range(n):
            mat[i][index] = 0
            mat[index][i] = 0
        for i in initial:
            if i != index:
                visited.add(i)
                q.append(i)

        while q:
            curr = q.popleft()
            for k in range(n):
                if k not in visited and mat[curr][k]:
                    visited.add(k)
                    q.append(k)
        return len(visited)

    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        initial.sort()
        initial_set = set(initial)
        result_node = initial[0]
        min_spread = float("inf")
        
        for val in initial:
            removed_graph = [row[:] for row in graph]
            count = self.M(len(graph), removed_graph, val, initial_set)
            if count < min_spread or (count == min_spread and val < result_node):
                min_spread = count
                result_node = val

        return result_node

